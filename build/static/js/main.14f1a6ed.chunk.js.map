{"version":3,"sources":["SongList.jsx","SearchForm.jsx","App.js","serviceWorker.js","index.js"],"names":["skipTags","SongList","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","song","keys","filter","field","includes","tags","forEach","k","push","react_default","a","createElement","col","span","_this","list","style","marginTop","itemLayout","dataSource","props","songs","renderItem","s","Item","padding","background","marginBottom","_id","Meta","title","row","gutter","statistic","value","rank","name","artists","duration_ms","toFixed","description","populatetags","Component","Search","Input","Option","Select","SearchForm","fetchSongs","fetch","concat","state","search","sortOn","then","res","json","result","setSongData","data","error","onSearchChange","text","length","onSortByChange","placeholder","onSearch","enterButton","es_select","defaultValue","width","onChange","App","console","log","setState","className","card","src_SearchForm","src_SongList","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.14f1a6ed.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport {List, Tag, Avatar,Row, Col, Statistic} from 'antd'\nimport './App.css';\nconst skipTags =[ 'name', 'artists', 'key', 'mode', 'duration_ms', 'time_signature','rank']\nclass SongList extends Component {\n    constructor() {\n        super();\n    }\n    populatetags(song) {\n        var keys = Object.keys(song).filter(field => !skipTags.includes(field));;\n        var tags = [];\n        keys.forEach(function(k){\n            tags.push(<Col span={3}> {k} : <b>{song[k]}</b></Col>,)\n        })\n        return tags;\n    }\n  render() {\n    return (\n        <List\n        style={{marginTop:20}}\n        itemLayout=\"horizontal\"\n        dataSource={this.props.songs}\n        renderItem={s => (\n          <List.Item style={{padding: 10,background: '#f2f4f8',marginBottom:20}} keys={s._id}>\n            <List.Item.Meta\n              keys={s._id}\n              title={\n                <Row gutter={16}>\n                    <Col span={6}>\n                        <Statistic title=\"Rank\" value={s.rank} />\n                    </Col>\n                    <Col span={6}>\n                        <Statistic title=\"Song Name\" value={s.name} />\n                    </Col>\n                    <Col span={6}>\n                        <Statistic title=\"Artist\" value={s.artists} />\n                    </Col>\n                    <Col span={6}>\n                       <Statistic title=\"Duration\" value={((s.duration_ms/60000)).toFixed(2)+ ' Min'} />\n                    </Col>\n                </Row>\n                }\n              description={<div><Row gutter={16} style={{marginTop:20,padding:10}}>{this.populatetags(s)}</Row></div>}\n            />\n          </List.Item>)} />\n    );\n  }\n}\n\nexport default SongList;","import React, { Component } from 'react';\nimport {Input, Tag, Avatar, Row, Col, Select} from 'antd'\nimport './App.css';\nconst Search = Input.Search;\nconst Option = Select.Option;\nclass SearchForm extends Component {\n\n    constructor(){\n        super();\n        this.state = {\n            search: '', \n            sortOn: 'rank'\n        }\n    }\n  \n    componentDidMount() {\n        this.fetchSongs();\n    }\n    fetchSongs = () => {\n        fetch(`https://tunenow.herokuapp.com/api/songs?search=${this.state.search}&sortOn=${this.state.sortOn}`)\n        .then(res => res.json())\n        .then(\n        (result) => {\n            this.props.setSongData(result.data.songs)\n        },\n        (error) => {\n        } )\n    }\n    onSearchChange = (text) => {\n        this.state.search = text;\n        if (text.length > 2 || !text.length) {\n            this.fetchSongs();\n        }\n    }\n    onSortByChange = (value) => {\n        this.state.sortOn = value;\n        this.fetchSongs();\n    }\n    render() {\n    return (\n        <Row gutter={16}>\n            <Col span={16}>\n                <Search\n                placeholder=\"input search text\"\n                onSearch={this.onSearchChange}\n                enterButton\n                />\n            </Col>\n            <Col span={8}>\n            <label>Sort By : </label>\n            <Select defaultValue=\"rank\" style={{ width: 120 }} onChange={this.onSortByChange}>\n                <Option value=\"duration_ms\">Time</Option>\n                <Option value=\"name\">Name</Option>\n                <Option value=\"artists\">Artists</Option>\n                <Option value=\"rank\">Rank</Option>\n            </Select>\n            </Col>\n        </Row>\n        \n    );\n  }\n}\n\nexport default SearchForm;","import React, { Component } from 'react';\nimport {Button , Card} from 'antd'\nimport './App.css';\nimport SongList from './SongList'\nimport SearchForm from './SearchForm'\n\nclass App extends Component {\n  constructor(){\n    super();\n    this.state = {\n      songs : []\n    }\n  }\n  setSongData = (songs) => {  \n    console.log(songs)\n    this.setState({songs:songs})\n  }\n  render() {\n    return (\n      <div className=\"App\" style={{padding:30}}>\n       <Card>\n        <SearchForm setSongData={this.setSongData}/>\n        <SongList songs={this.state.songs}/>\n       </Card>\n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}